﻿@{
	Layout = "_LayoutCustomer";
}

@RenderSection("BreadCum", required: false)

<div class="container-fluid fruite py-5">
	<div class="container py-5">
		<div class="row g-4">
			<div class="col-lg-12">
				<div class="row g-4">
					<div class="col-lg-3">
						<h3>Bộ Lọc Nâng Cao</h3>
						<div class="row g-4">
							@await Component.InvokeAsync("Filter")
							<div class="col-lg-12">
								<div class="mb-3" id="price-ranges">
									<h4>Giá bán</h4>
									<div class="mb-2">
										<input type="radio" class="me-2" id="price1" data-min="0" data-max="100000">
										<label for="Categories-1"> Dưới 100.000đ</label>
									</div>
									<div class="mb-2">
										<input type="radio" class="me-2" id="price2" data-min="100000" data-max="300000">
										<label for="Categories-2"> 100.000đ đến 300.000đ</label>
									</div>
									<div class="mb-2">
										<input type="radio" class="me-2" id="price3" data-min="300000" data-max="500000">
										<label for="Categories-3"> 300.000đ đến 500.000đ</label>
									</div>
									<div class="mb-2">
										<input type="radio" class="me-2" id="price4" data-min="500000" data-max="100000000">
										<label for="Categories-4"> Trên 500.000đ</label>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-lg-9">
						<div class="row g-4 justify-content-start">
							@RenderBody()
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ccheckboxes = document.querySelectorAll('#categories input[type="checkbox"]');
		const vcheckboxes = document.querySelectorAll('#vendors input[type="checkbox"]');
		const radioButtons = document.querySelectorAll('#price-ranges input[type="radio"]');
		let lastChecked = null;

		const urlParams = new URLSearchParams(window.location.search);

		// Initialize categoryIds from URL params if available
		let categoryIds = urlParams.getAll('categoryId').map(Number);

		// Initialize vendorIds from URL params if available
		let vendorIds = urlParams.getAll('vendorId').map(Number);

		// Initialize minPrice and maxPrice from URL params if available
		let selectedMinPrice = urlParams.get('minPrice');
		let selectedMaxPrice = urlParams.get('maxPrice');

		console.log(selectedMinPrice);
		console.log(selectedMaxPrice);

		ccheckboxes.forEach(checkbox => {
			// Set the checkbox state based on categoryIds
			if (categoryIds.includes(parseInt(checkbox.value))) {
				checkbox.checked = true;
			}

			checkbox.addEventListener('change', function () {
				const value = parseInt(checkbox.value);
				if (checkbox.checked) {
					// Add to categoryIds if checked
					if (!categoryIds.includes(value)) {
						categoryIds.push(value);
					}
				} else {
					// Remove from categoryIds if unchecked
					categoryIds = categoryIds.filter(id => id !== value);
				}
				loadViewWithParams(categoryIds, vendorIds, selectedMinPrice, selectedMaxPrice);
			});
		});
		vcheckboxes.forEach(checkbox => {
			// Set the checkbox state based on vendorIds
			if (vendorIds.includes(parseInt(checkbox.value))) {
				checkbox.checked = true;
			}

			checkbox.addEventListener('change', function () {
				const value = parseInt(checkbox.value);
				if (checkbox.checked) {
					// Add to vendorIds if checked
					if (!vendorIds.includes(value)) {
						vendorIds.push(value);
					}
				} else {
					// Remove from vendorIds if unchecked
					vendorIds = vendorIds.filter(id => id !== value);
				}
				loadViewWithParams(categoryIds, vendorIds, selectedMinPrice, selectedMaxPrice);
			});
		});
		radioButtons.forEach(radio => {
			// Set the radio button state based on minPrice and maxPrice
			if (radio.dataset.min === selectedMinPrice && radio.dataset.max === selectedMaxPrice) {
				radio.checked = true;
				lastChecked = radio;
			}

			radio.addEventListener('change', function () {
				if (radio === lastChecked) {
					radio.checked = false;
					lastChecked = null;
					loadViewWithParams(categoryIds, vendorIds, null, null);
				} else {
					lastChecked = radio;
					const minPrice = radio.dataset.min;
					const maxPrice = radio.dataset.max;
					loadViewWithParams(categoryIds, vendorIds, minPrice, maxPrice);
				}
			});
		});
	});

	function loadViewWithParams(categoryIds, vendorIds, minPrice, maxPrice)
	{
		const url = new URL(window.location.href);
		url.search = ''; // Clear existing query params

		categoryIds.forEach(id => {
			url.searchParams.append('categoryId', id);
		});

		vendorIds.forEach(id => {
			url.searchParams.append('vendorId', id);
		});

		if (minPrice != null && maxPrice != null) {
			url.searchParams.set('minPrice', minPrice);
			url.searchParams.set('maxPrice', maxPrice);
		}

		window.location.href = url.toString();
	}
</script>