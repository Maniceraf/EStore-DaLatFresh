﻿@{
	Layout = "_LayoutCustomer";
}

@RenderSection("BreadCum", required: false)

<div class="container-fluid fruite py-5">
	<div class="container py-5">
		<div class="row g-4">
			<div class="col-lg-12">
				<div class="row g-4">
					<div class="col-lg-3">
						<h3>Bộ Lọc Nâng Cao</h3>
						<div class="row g-4">
							@await Component.InvokeAsync("Filter")
							<div class="col-lg-12">
								<div class="mb-3">
									<h4>Giá bán</h4>
									<div class="mb-2">
										<input type="checkbox" class="me-2" id="Categories-1" name="Categories-1" value="Beverages">
										<label for="Categories-1"> Dưới 100.000đ</label>
									</div>
									<div class="mb-2">
										<input type="checkbox" class="me-2" id="Categories-2" name="Categories-1" value="Beverages">
										<label for="Categories-2"> 100.000đ đến 300.000đ</label>
									</div>
									<div class="mb-2">
										<input type="checkbox" class="me-2" id="Categories-3" name="Categories-1" value="Beverages">
										<label for="Categories-3"> 300.000đ đến 500.000đ</label>
									</div>
									<div class="mb-2">
										<input type="checkbox" class="me-2" id="Categories-4" name="Categories-1" value="Beverages">
										<label for="Categories-4"> Trên 500.000đ</label>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="col-lg-9">
						<div class="row g-4 justify-content-start">
							@RenderBody()
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	document.addEventListener('DOMContentLoaded', function () {
		const ccheckboxes = document.querySelectorAll('#categories input[type="checkbox"]');
		const vcheckboxes = document.querySelectorAll('#vendors input[type="checkbox"]')

		const urlParams = new URLSearchParams(window.location.search);

		// Initialize categoryIds from URL params if available
		let categoryIds = urlParams.getAll('categoryId').map(Number);

		// Initialize vendorIds from URL params if available
		let vendorIds = urlParams.getAll('vendorId').map(Number);

		ccheckboxes.forEach(checkbox => {
			// Set the checkbox state based on categoryIds
			if (categoryIds.includes(parseInt(checkbox.value))) {
				checkbox.checked = true;
			}

			checkbox.addEventListener('change', function () {
				const value = parseInt(checkbox.value);
				if (checkbox.checked) {
					// Add to categoryIds if checked
					if (!categoryIds.includes(value)) {
						categoryIds.push(value);
					}
				} else {
					// Remove from categoryIds if unchecked
					categoryIds = categoryIds.filter(id => id !== value);
				}

				loadViewWithParams(categoryIds, vendorIds);
			});
		});
		vcheckboxes.forEach(checkbox => {
			// Set the checkbox state based on vendorIds
			if (vendorIds.includes(parseInt(checkbox.value))) {
				checkbox.checked = true;
			}

			checkbox.addEventListener('change', function () {
				const value = parseInt(checkbox.value);
				if (checkbox.checked) {
					// Add to vendorIds if checked
					if (!vendorIds.includes(value)) {
						vendorIds.push(value);
					}
				} else {
					// Remove from vendorIds if unchecked
					vendorIds = vendorIds.filter(id => id !== value);
				}

				loadViewWithParams(categoryIds, vendorIds);
			});
		});
	});

	function loadViewWithParams(categoryIds, vendorIds) {
		const url = new URL(window.location.href);
		url.search = ''; // Clear existing query params

		categoryIds.forEach(id => {
			url.searchParams.append('categoryId', id);
		});

		vendorIds.forEach(id => {
			url.searchParams.append('vendorId', id);
		});

		window.location.href = url.toString();
	}
</script>